a. Working with Higher Order Function in JavaScript
javascript
CopyEdit
// Higher-order function: accepts a function as argument
function greet(name) {
  return `Hello, ${name}!`;
}

function processUserInput(callback) {
  const name = "Alice";
  console.log(callback(name)); // Hello, Alice!
}

processUserInput(greet);
________________________________________
b. Using Callback and Creating a Callback Hell Situation
javascript
CopyEdit
// Simulated async steps using nested callbacks (callback hell)
function step1(callback) {
  setTimeout(() => {
    console.log("Step 1 complete");
    callback();
  }, 1000);
}

function step2(callback) {
  setTimeout(() => {
    console.log("Step 2 complete");
    callback();
  }, 1000);
}

function step3(callback) {
  setTimeout(() => {
    console.log("Step 3 complete");
    callback();
  }, 1000);
}

// Callback hell
step1(() => {
  step2(() => {
    step3(() => {
      console.log("All steps completed (callback hell)");
    });
  });
});
________________________________________
c. Working with XHR: Response
javascript
CopyEdit


// Make an HTTP GET request using XMLHttpRequest
function fetchDataWithXHR() {
  const xhr = new XMLHttpRequest();
  xhr.open("GET", "https://jsonplaceholder.typicode.com/posts/1", true);

  xhr.onload = function () {
    if (xhr.status === 200) {
      const data = JSON.parse(xhr.responseText);
      console.log("XHR Response:", data);
    } else {
      console.error("XHR Error:", xhr.status);
    }
  };

  xhr.onerror = function () {
    console.error("Request failed.");
  };

  xhr.send();
}

fetchDataWithXHR();
________________________________________
d. Dealing with Callback Hell Using Promises
javascript
CopyEdit
// Rewriting the earlier steps using Promises
function step1() {
  return new Promise(resolve => {
    setTimeout(() => {
      console.log("Step 1 complete");
      resolve();
    }, 1000);
  });
}

function step2() {
  return new Promise(resolve => {
    setTimeout(() => {
      console.log("Step 2 complete");
      resolve();
    }, 1000);
  });
}

function step3() {
  return new Promise(resolve => {
    setTimeout(() => {
      console.log("Step 3 complete");
      resolve();
    }, 1000);
  });
}

step1()
  .then(step2)
  .then(step3)
  .then(() => console.log("All steps complete (Promise)"));
________________________________________
e. Dealing with Promise Chaining and Async / Await
javascript
CopyEdit
// Same example using async/await
async function runSteps() {
  await step1();
  await step2();
  await step3();
  console.log("All steps complete (Async/Await)");
}

runSteps();

// Note: step1, step2, and step3 from the previous section are reused here.
